const core = require('@actions/core');
const fs = require('fs');
const path = require('path');
const json2md = require("json2md");

const needGeneReadme = core.getInput('need-gene-readme');

const repo = process.env.GITHUB_REPOSITORY;
const repoInfo = repo.split("/");
const repoName = repoInfo[1];

let gitRef = process.env.GITHUB_REF;

if (gitRef) {
  const refs = gitRef.split("/");
  gitRef = refs[refs.length - 1];
} else {
  gitRef = 'master';
}

const manifestList = [];

function walkDirs(dirPath) {
  if (!dirPath) return;
  const imageDir = path.join(dirPath, "images");
  console.log(`image dir: ${imageDir}`);
  if (fs.existsSync(imageDir)) {
    console.log(`image dir exist: ${imageDir}`)
    const imageList = readImageDir(imageDir);
    if (imageList) {
      const imageManifest = toImageManifest(imageList, dirPath);
      console.log(`manifest: ${imageManifest}`);
      dumpData(imageManifest, path.join(dirPath, "manifest.json"));
    }
    return;
  }

  fs.readdirSync(dirPath).forEach(file => {
    if (file.startsWith('.')) return;
    const subDirPath = path.join(dirPath, file);
    if (fs.statSync(subDirPath).isDirectory()) {
      walkDirs(subDirPath);
    }
  });
}

function toImageManifest(imageList, dirPath) {
  let items = [];
  imageList.forEach(imagePath => {
    items.push({
      "type": "image",
      "url": toRawUrl(imagePath)
    })
  });
  return {
    name: `${repo}/${dirPath}`,
    version: "1.0",
    repo: `https://github.com/${repo}/tree/${gitRef}/${dirPath}`,
    type: "resource",
    items: items
  };
}

function toRawUrl(filePath) {
  return `https://raw.githubusercontent.com/${repo}/${gitRef}/${filePath}`;
}

function readImageDir(imageDir) {
  const imageExts = ["png", "jpg", "jpeg", "bmp"];
  let imagePathList = [];

  fs.readdirSync(imageDir).forEach(file => {
    if (imageExts.indexOf(path.extname(file).slice(1).toLowerCase()) > -1) {
      let imagePath = path.join(imageDir, file);
      console.log(`image path: ${imagePath}`);
      imagePathList.push(imagePath);
    }
  });

  console.log(`>>>>>>>>>>>>>>>> image list: ${imagePathList}`)
  return imagePathList;
}

function readJsonFile(jsonFilePath) {
  fs.readFile(jsonFilePath, 'utf8', (err, data) => {
    if (err) return {};
    var jsonObj = JSON.parse(data);
    if (typeof jsonObj === "object") {
      return jsonObj
    }
  });
}

function dumpData(manifestData, dataFilePath) {
  const jsonData = JSON.stringify(manifestData);
  try {
    fs.writeFileSync(dataFilePath, jsonData);
    let albumName = repoName;
    if (dataFilePath.indexOf("/") > -1) {
      albumName = dataFilePath.split("/").reverse()[1]
    }
    console.log(`album name: ${albumName}`)
    manifestList.push(`[${albumName}](${toRawUrl(dataFilePath)})`);
  } catch (err) {
    console.log(`dump manifest file error: ${err}`);
  }
}

function geneReadme() {
  const text = json2md([
    { h1: `TabHub Cards: ${repoName}` }
    , { blockquote: "Generated by [TabHub Card Action](https://github.com/tabhub/tabhub-card-action)" }
    , { h3: "Resource List"}
    , { p: "You can copy one of link addresses below as a resource url to add in your [TabHub](https://tabhub.io) settings:" }
    , { ul: manifestList }
  ]);

  fs.writeFile('./README.md', text, (err) => {
    if (err) console.log(`write README file error: ${err}`);
  })
}

walkDirs('.');
console.log(`manifest list: ${manifestList}`);
if (needGeneReadme) geneReadme();
